name: Build and Push Multiarch Image to GHCR

on:
  push:
    branches:
      - main
    tags:
      - 'v*.*.*'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: thread-router

jobs:
  build-amd64:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Ensure full history for git rev-parse

      - name: Set lowercase owner name
        run: echo "OWNER_LC=$(echo ${{ github.repository_owner }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set version and tags
        id: set_tags
        run: |
          if [ "${{ github.ref_type }}" = "tag" ]; then
            VERSION="${{ github.ref_name }}"
          else
            # Use VERSION file if it exists, otherwise use short SHA
            if [ -f "VERSION" ]; then
              VERSION=$(cat VERSION)
            else
              VERSION=$(git rev-parse --short ${{ github.sha }})
            fi
          fi
          AMD64_TAG="${{ env.REGISTRY }}/${{ env.OWNER_LC }}/${{ env.IMAGE_NAME }}:amd64-${VERSION}"
          echo "AMD64_TAG=$AMD64_TAG" >> $GITHUB_OUTPUT
          echo "TAGS=${{ env.REGISTRY }}/${{ env.OWNER_LC }}/${{ env.IMAGE_NAME }}:amd64" >> $GITHUB_OUTPUT

      - name: Build amd64 image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64
          build-args: |
            ARCH_PREFIX=amd64
          load: true
          tags: |
            ${{ steps.set_tags.outputs.TAGS }}
            ${{ steps.set_tags.outputs.AMD64_TAG }}

      - name: Push amd64 image
        run: |
          docker push ${{ steps.set_tags.outputs.TAGS }}
          docker push ${{ steps.set_tags.outputs.AMD64_TAG }}

  build-arm64:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Ensure full history for git rev-parse

      - name: Set lowercase owner name
        run: echo "OWNER_LC=$(echo ${{ github.repository_owner }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set version and tags
        id: set_tags
        run: |
          if [ "${{ github.ref_type }}" = "tag" ]; then
            VERSION="${{ github.ref_name }}"
          else
            # Use VERSION file if it exists, otherwise use short SHA
            if [ -f "VERSION" ]; then
              VERSION=$(cat VERSION)
            else
              VERSION=$(git rev-parse --short ${{ github.sha }})
            fi
          fi
          ARM64_TAG="${{ env.REGISTRY }}/${{ env.OWNER_LC }}/${{ env.IMAGE_NAME }}:arm64-${VERSION}"
          echo "ARM64_TAG=$ARM64_TAG" >> $GITHUB_OUTPUT
          echo "TAGS=${{ env.REGISTRY }}/${{ env.OWNER_LC }}/${{ env.IMAGE_NAME }}:arm64" >> $GITHUB_OUTPUT

      - name: Build arm64 image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/arm64
          build-args: |
            ARCH_PREFIX=aarch64
          load: true
          tags: |
            ${{ steps.set_tags.outputs.TAGS }}
            ${{ steps.set_tags.outputs.ARM64_TAG }}

      - name: Push arm64 image
        run: |
          docker push ${{ steps.set_tags.outputs.TAGS }}
          docker push ${{ steps.set_tags.outputs.ARM64_TAG }}

  create-manifest:
    needs: [build-amd64, build-arm64]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Ensure full history for git rev-parse

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set manifest variables
        id: manifest_vars
        run: |
          OWNER_LC=$(echo ${{ github.repository_owner }} | tr '[:upper:]' '[:lower:]')
          FULL_IMAGE_NAME="${{ env.REGISTRY }}/$OWNER_LC/${{ env.IMAGE_NAME }}"
          if [ "${{ github.ref_type }}" = "tag" ]; then
            VERSION="${{ github.ref_name }}"
          else
            if [ -f "VERSION" ]; then
              VERSION=$(cat VERSION)
            else
              VERSION=$(git rev-parse --short ${{ github.sha }})
            fi
          fi
          MANIFEST_TAG="${VERSION}"
          AMD64_TAG="amd64-${VERSION}"
          ARM64_TAG="arm64-${VERSION}"
          echo "FULL_IMAGE_NAME=$FULL_IMAGE_NAME" >> $GITHUB_OUTPUT
          echo "MANIFEST_TAG=$MANIFEST_TAG" >> $GITHUB_OUTPUT
          echo "AMD64_TAG=$AMD64_TAG" >> $GITHUB_OUTPUT
          echo "ARM64_TAG=$ARM64_TAG" >> $GITHUB_OUTPUT
          # Always create :latest as well
          echo "LATEST_TAG=latest" >> $GITHUB_OUTPUT

      - name: Create and push manifest
        run: |
          docker manifest create ${{ steps.manifest_vars.outputs.FULL_IMAGE_NAME }}:${{ steps.manifest_vars.outputs.MANIFEST_TAG }} \
            ${{ steps.manifest_vars.outputs.FULL_IMAGE_NAME }}:${{ steps.manifest_vars.outputs.AMD64_TAG }} \
            ${{ steps.manifest_vars.outputs.FULL_IMAGE_NAME }}:${{ steps.manifest_vars.outputs.ARM64_TAG }}
          docker manifest push ${{ steps.manifest_vars.outputs.FULL_IMAGE_NAME }}:${{ steps.manifest_vars.outputs.MANIFEST_TAG }}
          docker manifest create ${{ steps.manifest_vars.outputs.FULL_IMAGE_NAME }}:${{ steps.manifest_vars.outputs.LATEST_TAG }} \
            ${{ steps.manifest_vars.outputs.FULL_IMAGE_NAME }}:${{ steps.manifest_vars.outputs.AMD64_TAG }} \
            ${{ steps.manifest_vars.outputs.FULL_IMAGE_NAME }}:${{ steps.manifest_vars.outputs.ARM64_TAG }}
          docker manifest push ${{ steps.manifest_vars.outputs.FULL_IMAGE_NAME }}:${{ steps.manifest_vars.outputs.LATEST_TAG }}
